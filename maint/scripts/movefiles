#!/usr/bin/php
<?php

/*
	Script for copying files from a location with updated RPMs/specs to a place without
	these updated files.
	
	Important variables:
		$DEST_ROOT: absolute path to folder (with trailing slash) containing
			subdirectories SPECS, SRPMS, and RPMS. RPMS will have subdirectories
			for different architectures like x86_64, i486, noarch, etc.
			Files are copied TO these folders.
		$OLD_ROOT: absolute path to folder (with trailing slash) where the most
			recent old copy is to be placed. Has same subdirectory structure as
			$DEST_ROOT.

	Usage:
		Give source directory (files copied FROM here) as the first parameter.
		Script will recursively search all subdirectories of that folder.
		
	Known limitations/issues:
		- Any file will only match with its same LSB version. If you make your
		  package work with a newer version of LSB, the package with the previous
		  version of LSB will remain in the archives. Changing this behavior will
		  likely require looping through all find results, finding the appropriate
		  one to check for a version change.
		- Moving from a version number like 2.9 to 2.10 will cause the script to 
		  claim the "source" copy of the file is stale. Need to find something better
		  than string comparison to compare version numbers.
		- Hopefully no other bugs?
*/

$DEST_ROOT = '/srv/www/openprinting/download/printdriver/';
$OLD_ROOT =  '/srv/www/openprinting/download/printdriver/old/';
$SRC_ROOT = false;		// set by parameter 1

// ---------------------------
// Check script arguments.
// ---------------------------
if(count($argv) == 2)
	$SRC_ROOT = $argv[1];
else
	showUsage();

// ---------------------------
// Verify the user/upload script did not fail miserably at picking a directory.
// ---------------------------
(file_exists($SRC_ROOT) && is_dir($SRC_ROOT))
	or die("Source does not exist or is not a directory.\n");
(file_exists($DEST_ROOT) && is_dir($DEST_ROOT))
	or die("Destination does not exist or is not a directory.\n");	
(file_exists($OLD_ROOT) && is_dir($OLD_ROOT))
	or die("Backup location does not exist or is not a directory.\n");	

echo "\nSource directory: $SRC_ROOT\n";
echo "Destination:      $DEST_ROOT\n\n";

// ---------------------------
// Scan for files in the given directory and handle accordingly
// ---------------------------
$stack = array($SRC_ROOT);
while($curdir = realpath(array_pop($stack))) {
	$dirh = opendir($curdir) or die("Unable to open directory $curdir!\n");
	
	// For all files and directories in the current directory
	while($file = readdir($dirh)) {
		if($file != "." && $file != "..") {
			$filePath = $curdir.'/'.$file;
			if(!is_dir($filePath)) {
				// Found a file. Determine if this file is something we want to handle.
				if($r = matchTypeByName($file,$filePath)) {
					if(empty($r['fullver'])) {
						// Failed to get version information for this file, not much we can do.
						echo "**  ERROR : Can't version ".$r['name']." (".$r['arch'].")\n";
					} else {
						// Determine destination directory to be searched
						if($r['arch'] == 'spec') $subdir = 'SPECS/';
						else if($r['arch'] == 'src') $subdir = 'SRPMS/';
						else $subdir = 'RPMS/'.$r['arch'].'/';
						
						// Formatting for file name displayal... if you want to see them nicely
						$dispname = str_pad($r['name'],30);
						if(strlen($dispname) > 30) $dispname = "...".substr($dispname,strlen($dispname)-27);
						$dispname .= str_pad(' '.$r['arch'],5);
						
						// Check to see if the older file is lingering about, otherwise same version				
						exec('find '.$DEST_ROOT.$subdir.' -name \''.$r['match'].'\'',$find);
						if($match = array_pop($find)) {
							// Must check destination to see if the file is older
							$other = matchTypeByName(basename($match),$match);
							if($r['fullver'] == $other['fullver']) {
								echo "       Ok : ".$dispname." (".$r['fullver'].")\n";
							} else if ($r['fullver'] > $other['fullver']) {
								echo "   Update : ".$dispname.' ('.$r['fullver'].' ==> '.$other['fullver'].")\n";
								exec("rm $OLD_ROOT$subdir".$r['match']);
								exec("cp '$match' '$OLD_ROOT$subdir'");
								exec("rm '$match'");
								copy($filePath,$DEST_ROOT.$subdir.$file);
							} else {
								echo "**  Stale : ".$dispname." (".$r['fullver']." =\\> ".$other['fullver'].")\n";
							}
							
							if(count($find)) echo "  <<!>>     Warning: multiple file matches found!\n";
						} else {
							echo "      New : ".$dispname." copied to destination (".$r['fullver'].' ==> '.") \n";
							copy($filePath,$DEST_ROOT.$subdir.$r['file']) or die("Unable to copy to destination dir.\n");
						}
					}
				}
			} else {
				// Add this subdirectory to the search list
				array_push($stack,$filePath);
			}
		}
	}
	closedir($dirh);
}
//echo "Done scanning.\n";
echo "\n";

function showUsage() {
	echo "Usage error. Provide a directory path to copy files from.\n";
	exit;
}

/* Return false if file cannot be matched to a file we want to handle
	like <name>-<version>-<lsbversion>.<arch>.rpm, ...src.rpm or <name>.spec
   Otherwise returns associative array with keys  
	 file, name, ver (without lsb portion), lsbver, fullver, 
	 type (spec, srpm, or <arch>), match (filename with * instead of version info)
	 
	 File examples
	 
	 SRPMS  openprinting-ppds-pxlmono-savin-20081112-1lsb3.2.src.rpm
	        sane-backends-1.0.19-0.1lsb3.1.src.rpm
			lm1100-1.0.2a-1lsb3.1.src.rpm
	 SPEC   whatever1-7h15-is.spec
	 <arch> openprinting-splix-2.0.0-0.rc2.4lsb3.2.x86_64.rpm
			cups-da-1.3.0-1lsb3.1.x86_64.rpm
*/
function matchTypeByName($fileName,$fullPath) {
	$r = array();
	$regexp_arch = '&^([0-9A-Za-z\-_\.]+)(\-(([0-9]+[0-9\.\-a-z]*\-[0-9\.\-a-z]*)(lsb[0-9\.]+))\.(x86_64|i486|noarch|src)\.rpm)$&';
	$regexp_spec = '&^([A-Za-z0-9\-]+)(\.spec)$&';
	$specver = '&(([0-9]+[0-9\.\-a-z]*\-[0-9\.\-a-z]*)(lsb[0-9\.]+))&';
	
	// Try to match x86_64, i486, noarch RPMs first
	if(preg_match($regexp_arch,$fileName,$archa)) {
		$r['file'] = $archa[0];
		$r['name'] = $archa[1];
		$r['ver'] = $archa[4];
		$r['fullver'] = $archa[3];
		$r['lsbver'] = $archa[5];
		$r['arch'] = $archa[6];
		$r['match'] = $r['name'].'-*'.$r['lsbver'].'.'.$r['arch'].'.rpm'; // changed to allow multiple LSB versions
		$r['match_anyLSB'] = $r['name'].'-*.'.$r['arch'].'.rpm'; 		  // previous version
		return $r;
	} else if($arch = preg_match($regexp_spec,$fileName,$archa)) {
		$r['file'] = $archa[0];
		$r['name'] = $archa[1];
		$r['arch'] = 'spec';
		$r['ver'] = false;
		$r['fullver'] = false;
		$r['lsbver'] = false;
		
		// Need to GREP the spec file to find the version information in changelog
		// Then run a regexp on that to get the version info itself		
		// version not in file name! (have to double check when searching)
		exec('grep -A2 %changelog '.$fullPath,$out);
		foreach($out as $o) {
			if(!preg_match($specver,$o,$archa)) continue;
			$r['fullver'] = $archa[1];
			$r['lsbver'] = $archa[3];
			$r['ver'] = $archa[2];
			$r['match'] = $r['file']; 
			$r['match_anyLSB'] = $r['file']; 
			break;
		}
		return $r;
	} else {
		return false;
	}
}

?>
