#!/bin/sh

# Auto conversion of a single 32-bit or 64-bit x86 RPM to DEB and indexing
# of the DEB repository
# If '--all' is passed a s a single argument, the script converts
# all existing RPM packages
# Needed to be installed (script runs only on x86_64/amd64):
# fakeroot, alien, linux32 (util-linux), ia32-libs, apt-utils (or
# apt-ftparchive)

# The script takes into account USE_EXISTING_DEBS environment variable
# - if it is set, it tries to reuse packages from DEBDIR instead of
# building new ones (DEBDIR should be also set by the caller)

wwwdir=/srv/www/openprinting
maindir=$wwwdir/download/printdriver
mainurl=http://www.openprinting.org/download/printdriver

componentexceptions=../components.lst

build_for_arch() {
    # Build package for a given arch
    # Argument: architecture
    case $1 in
	x86_64)
	    dpkg-buildpackage -aamd64 -rfakeroot -us -uc || exit 1
	    ;;
	i486)
	    dpkg-buildpackage -ai386 -rfakeroot -us -uc || exit 1
	    ;;
	noarch)
	    dpkg-buildpackage -rfakeroot -us -uc || exit 1
	    ;;
	*)
	    echo "Not an appropriate architecture!"
	    exit 1
	    ;;
    esac
}

move_to_repo() {
    # Move package to appropriate repository
    # Arguments: package, lsbrelease, component
    p=$1
    lsbrelease=$2
    component=$3

    echo Moving package $p into repository ...
    arch=`echo "$p" | perl -e '<> =~ /_([^_]+).deb$/; print $1'`  # all i386 amd64
    component=`perl -e 'open F, "< '"$componentexceptions"'"; while ($l = <F>) {($re, $c) = split / /, $l; if ("'"$p"'" =~ /$re/) {print "$c"; last}} close F;'`
    if [ ! -n "$component" ]; then
        component=`echo "$p" | perl -e '<> =~ /^([^_]+)_\d/; print $1' | perl -p -e 's/^openprinting-(ppds-|)//'`
    fi

    #If no architecture (_all.deb) then place file in all architecture directories
    if [ $arch = 'all' ]; then
        arch='amd64 i386'
    fi

    # Place file in proper directory
    for a in $arch; do
        # Update the component directory with new file, deleting all old
        # Generate file mask to delete old files
        match=`echo "$p" | perl -e '$q = <>; $q =~ /([a-zA-Z0-9\.-]+_)[a-zA-Z0-9\.-]+(_[a-zA-Z0-9\.-]+\.deb)$/; print "$1*$2";'`
        # Create directory if not yet done
        mkdir -p ../debian/dists/lsb$lsbrelease/$component/binary-$a/ || exit 1
        # Remove old versions
        rm -f ../debian/dists/lsb$lsbrelease/$component/binary-$a/$match
        # Copy new version of file
        cp "$p" ../debian/dists/lsb$lsbrelease/$component/binary-$a/ || exit 1
    done
}

convert_pkg() {
    # convert RPM to DEB
    # Arguments: package, lsbrelease
    p=$1
    lsbrelease=$2

    shortname=`basename $p`
    echo Converting package $shortname to Debian format ...

    if [ "x$USE_EXISTING_DEBS" != "x" ]
    then
	echo "Trying to reuse existing package..."
	# RPM and Deb names are not exactly the same,
	# let's try to guess Deb name on the basis f RPM one
	# (replace '-' with '_' before year and archs, as well as arch names)
	debname=`echo $shortname | sed 's/-20/_20/' | sed 's/.noarch/_all/' \\
		    | sed 's/.rpm/.deb/' | sed 's/.x86_64/_amd64/' | sed 's/.i486/_i386/'`

	echo $debname | grep -q "_all"
	noarch=$?
	echo $debname | grep -q "_amd64"
	amd=$?

	if [ $noarch = "0" ]
	then
	    DEBPKG="$DEBDIR/noarch/$debname"
	elif [ $amd = "0" ]
	then
	    DEBPKG="$DEBDIR/amd64/$debname"
	else
	    DEBPKG="$DEBDIR/i386/$debname"
	fi

	if [ -f $DEBPKG ]
	then
	    cp $DEBPKG .
	    return 0
	else
	    echo "Failed to find $DEBPKG, will generate new package"
	fi
    fi

    fakeroot alien -ckg $p || exit
    arch=`echo "$p" | perl -e '<> =~ /(x86_64|i486|noarch).rpm$/; print $1'`
    d=`echo $p | perl -p -e 's/^.*?([^\/]*)-[a-zA-Z\d\.]+lsb[\d\.]+\.[^\.]+\.rpm/\1/i'`
    cd $d
    if [ "$arch" != "noarch" ]; then
	perl -p -i -e 's/^(\s*Depends:\s*).*$/\1lsb (>= '$lsbrelease')/' debian/control
    fi
    perl -p -i -e 's/(dh_(shlibdeps|installchangelogs|installdocs))/\#\1/' debian/rules
    build_for_arch $arch || exit 1
    cd ..
}

######################
#  The main part
######################

echo 

mkdir -p $maindir/debian
cd $maindir

if [ $# = 1 ] && [ $1 = "--all" ]; then
    # '--all' argument provided - process all packages
    #for lsbrelease in 3.2 3.1; do
    for lsbrelease in 3.2; do
        if [ -e tmp ]; then 
	    rm -r tmp
        fi
	mkdir tmp
	cd tmp

	for p in ../RPMS/*64/*lsb$lsbrelease*.rpm ../RPMS/i?86/*lsb$lsbrelease*.rpm ../RPMS/noarch/*lsb$lsbrelease*.rpm ; do
	    convert_pkg $p $lsbrelease || exit 1
	done

	for p in *.deb; do
            move_to_repo $p $lsbrelease $component || exit 1
	    rm $p
	done

	cd ..
	rm -rf tmp
    done
elif [ $# = 1 ]; then
    # single argument, but not '--all' - assume it to be a file name
    if [ ! -f $1 ]; then
	echo "Non-existent file and no '--all' option."
	exit 1
    fi

    file=`readlink -fn $1`

    #Set up temporary directory
    if [ -e tmp ]; then 
	rm -r tmp
    fi
    mkdir tmp
    cd tmp

    #Detect LSB version and architecture from filename
    lsbrelease=`echo "$file" | perl -e '<> =~ /lsb([0-9\.]+).(x86_64|i486|noarch).rpm$/; print $1'`
    arch=`echo "$file" | perl -e '<> =~ /(x86_64|i486|noarch).rpm$/; print $1'`
    echo "LSB Version:  $lsbrelease"
    echo "Architecture: $arch"

    convert_pkg $file $lsbrelease || exit 1

    echo
    echo
    echo

    # Move package to appropriate repository
    for p in *.deb; do
        move_to_repo $p $lsbrelease $component || exit 1
    done

    #Clean up temp directory
    cd ..
    rm -r tmp
else
    # Re-index-only mode
    echo No package update, only re-indexing the repository ...
    echo
fi

echo Indexing Debian repository ...

# Remove old .db files, their format can change between apt versions
find debian -name "*.db" | xargs rm

# Generate configuration files
cat > debian/apt-ftparchive.conf <<EOF
Dir {
  ArchiveDir "$maindir/debian";
  CacheDir "$maindir/debian/cache";
};

EOF

for lsbrelease in 3.1 3.2; do
    components=`(cd debian/dists/lsb$lsbrelease/; ls -1d */.) | cut -d / -f 1`
    components=`echo $components`
    echo $components
    #perl -p -i -e 's/(Sections\s+\")[^\"]*(\";)/$1'"$components"'$2/' debian/apt-ftparchive.conf
    cat >> debian/apt-ftparchive.conf <<EOF
Tree "dists/lsb$lsbrelease" {
  Sections "$components";
  Architectures "i386 amd64";
};
EOF
    #perl -p -i -e 's/(::Components\s+\")[^\"]*(\";)/$1'"$components"'$2/' debian/apt-lsb3.2-release.conf
    cat > debian/apt-lsb$lsbrelease-release.conf <<EOF
APT::FTPArchive::Release::Origin \"$mainurl/debian/\";
APT::FTPArchive::Release::Label "printdriver";
APT::FTPArchive::Release::Suite "lsb$lsbrelease";
APT::FTPArchive::Release::Codename "lsb$lsbrelease";
APT::FTPArchive::Release::Architectures "i386 amd64";
APT::FTPArchive::Release::Components "$components";
APT::FTPArchive::Release::Description "Distribution-independent printer driver packages in Debian package format, for LSB-$lsbrelease-based distros";
EOF
done

# Do the actual indexing
apt-ftparchive generate debian/apt-ftparchive.conf || exit 1
for lsbrelease in 3.1 3.2; do
    apt-ftparchive -c debian/apt-lsb$lsbrelease-release.conf release $maindir/debian/dists/lsb$lsbrelease > $maindir/debian/dists/lsb$lsbrelease/Release || exit 1
done
echo Done.

echo 
exit 0
